// Code generated by mockery. DO NOT EDIT.

package contracts

import (
	mock "github.com/stretchr/testify/mock"
	contracts "github.com/tonidy/goravel-mongodb/contracts"
)

// QueryBuilder is an autogenerated mock type for the QueryBuilder type
type QueryBuilder struct {
	mock.Mock
}

type QueryBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryBuilder) EXPECT() *QueryBuilder_Expecter {
	return &QueryBuilder_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with no fields
func (_m *QueryBuilder) Count() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryBuilder_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type QueryBuilder_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
func (_e *QueryBuilder_Expecter) Count() *QueryBuilder_Count_Call {
	return &QueryBuilder_Count_Call{Call: _e.mock.On("Count")}
}

func (_c *QueryBuilder_Count_Call) Run(run func()) *QueryBuilder_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QueryBuilder_Count_Call) Return(_a0 int64, _a1 error) *QueryBuilder_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryBuilder_Count_Call) RunAndReturn(run func() (int64, error)) *QueryBuilder_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: results
func (_m *QueryBuilder) Find(results interface{}) error {
	ret := _m.Called(results)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(results)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryBuilder_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type QueryBuilder_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - results interface{}
func (_e *QueryBuilder_Expecter) Find(results interface{}) *QueryBuilder_Find_Call {
	return &QueryBuilder_Find_Call{Call: _e.mock.On("Find", results)}
}

func (_c *QueryBuilder_Find_Call) Run(run func(results interface{})) *QueryBuilder_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *QueryBuilder_Find_Call) Return(_a0 error) *QueryBuilder_Find_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_Find_Call) RunAndReturn(run func(interface{}) error) *QueryBuilder_Find_Call {
	_c.Call.Return(run)
	return _c
}

// First provides a mock function with given fields: result
func (_m *QueryBuilder) First(result interface{}) error {
	ret := _m.Called(result)

	if len(ret) == 0 {
		panic("no return value specified for First")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryBuilder_First_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'First'
type QueryBuilder_First_Call struct {
	*mock.Call
}

// First is a helper method to define mock.On call
//   - result interface{}
func (_e *QueryBuilder_Expecter) First(result interface{}) *QueryBuilder_First_Call {
	return &QueryBuilder_First_Call{Call: _e.mock.On("First", result)}
}

func (_c *QueryBuilder_First_Call) Run(run func(result interface{})) *QueryBuilder_First_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *QueryBuilder_First_Call) Return(_a0 error) *QueryBuilder_First_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_First_Call) RunAndReturn(run func(interface{}) error) *QueryBuilder_First_Call {
	_c.Call.Return(run)
	return _c
}

// Limit provides a mock function with given fields: limit
func (_m *QueryBuilder) Limit(limit int64) contracts.QueryBuilder {
	ret := _m.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for Limit")
	}

	var r0 contracts.QueryBuilder
	if rf, ok := ret.Get(0).(func(int64) contracts.QueryBuilder); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.QueryBuilder)
		}
	}

	return r0
}

// QueryBuilder_Limit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Limit'
type QueryBuilder_Limit_Call struct {
	*mock.Call
}

// Limit is a helper method to define mock.On call
//   - limit int64
func (_e *QueryBuilder_Expecter) Limit(limit interface{}) *QueryBuilder_Limit_Call {
	return &QueryBuilder_Limit_Call{Call: _e.mock.On("Limit", limit)}
}

func (_c *QueryBuilder_Limit_Call) Run(run func(limit int64)) *QueryBuilder_Limit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *QueryBuilder_Limit_Call) Return(_a0 contracts.QueryBuilder) *QueryBuilder_Limit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_Limit_Call) RunAndReturn(run func(int64) contracts.QueryBuilder) *QueryBuilder_Limit_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function with given fields: fields
func (_m *QueryBuilder) Select(fields ...string) contracts.QueryBuilder {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 contracts.QueryBuilder
	if rf, ok := ret.Get(0).(func(...string) contracts.QueryBuilder); ok {
		r0 = rf(fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.QueryBuilder)
		}
	}

	return r0
}

// QueryBuilder_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type QueryBuilder_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - fields ...string
func (_e *QueryBuilder_Expecter) Select(fields ...interface{}) *QueryBuilder_Select_Call {
	return &QueryBuilder_Select_Call{Call: _e.mock.On("Select",
		append([]interface{}{}, fields...)...)}
}

func (_c *QueryBuilder_Select_Call) Run(run func(fields ...string)) *QueryBuilder_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *QueryBuilder_Select_Call) Return(_a0 contracts.QueryBuilder) *QueryBuilder_Select_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_Select_Call) RunAndReturn(run func(...string) contracts.QueryBuilder) *QueryBuilder_Select_Call {
	_c.Call.Return(run)
	return _c
}

// Skip provides a mock function with given fields: skip
func (_m *QueryBuilder) Skip(skip int64) contracts.QueryBuilder {
	ret := _m.Called(skip)

	if len(ret) == 0 {
		panic("no return value specified for Skip")
	}

	var r0 contracts.QueryBuilder
	if rf, ok := ret.Get(0).(func(int64) contracts.QueryBuilder); ok {
		r0 = rf(skip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.QueryBuilder)
		}
	}

	return r0
}

// QueryBuilder_Skip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Skip'
type QueryBuilder_Skip_Call struct {
	*mock.Call
}

// Skip is a helper method to define mock.On call
//   - skip int64
func (_e *QueryBuilder_Expecter) Skip(skip interface{}) *QueryBuilder_Skip_Call {
	return &QueryBuilder_Skip_Call{Call: _e.mock.On("Skip", skip)}
}

func (_c *QueryBuilder_Skip_Call) Run(run func(skip int64)) *QueryBuilder_Skip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *QueryBuilder_Skip_Call) Return(_a0 contracts.QueryBuilder) *QueryBuilder_Skip_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_Skip_Call) RunAndReturn(run func(int64) contracts.QueryBuilder) *QueryBuilder_Skip_Call {
	_c.Call.Return(run)
	return _c
}

// Sort provides a mock function with given fields: field, order
func (_m *QueryBuilder) Sort(field string, order int) contracts.QueryBuilder {
	ret := _m.Called(field, order)

	if len(ret) == 0 {
		panic("no return value specified for Sort")
	}

	var r0 contracts.QueryBuilder
	if rf, ok := ret.Get(0).(func(string, int) contracts.QueryBuilder); ok {
		r0 = rf(field, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.QueryBuilder)
		}
	}

	return r0
}

// QueryBuilder_Sort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sort'
type QueryBuilder_Sort_Call struct {
	*mock.Call
}

// Sort is a helper method to define mock.On call
//   - field string
//   - order int
func (_e *QueryBuilder_Expecter) Sort(field interface{}, order interface{}) *QueryBuilder_Sort_Call {
	return &QueryBuilder_Sort_Call{Call: _e.mock.On("Sort", field, order)}
}

func (_c *QueryBuilder_Sort_Call) Run(run func(field string, order int)) *QueryBuilder_Sort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *QueryBuilder_Sort_Call) Return(_a0 contracts.QueryBuilder) *QueryBuilder_Sort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_Sort_Call) RunAndReturn(run func(string, int) contracts.QueryBuilder) *QueryBuilder_Sort_Call {
	_c.Call.Return(run)
	return _c
}

// Where provides a mock function with given fields: field, value
func (_m *QueryBuilder) Where(field string, value interface{}) contracts.QueryBuilder {
	ret := _m.Called(field, value)

	if len(ret) == 0 {
		panic("no return value specified for Where")
	}

	var r0 contracts.QueryBuilder
	if rf, ok := ret.Get(0).(func(string, interface{}) contracts.QueryBuilder); ok {
		r0 = rf(field, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.QueryBuilder)
		}
	}

	return r0
}

// QueryBuilder_Where_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Where'
type QueryBuilder_Where_Call struct {
	*mock.Call
}

// Where is a helper method to define mock.On call
//   - field string
//   - value interface{}
func (_e *QueryBuilder_Expecter) Where(field interface{}, value interface{}) *QueryBuilder_Where_Call {
	return &QueryBuilder_Where_Call{Call: _e.mock.On("Where", field, value)}
}

func (_c *QueryBuilder_Where_Call) Run(run func(field string, value interface{})) *QueryBuilder_Where_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *QueryBuilder_Where_Call) Return(_a0 contracts.QueryBuilder) *QueryBuilder_Where_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_Where_Call) RunAndReturn(run func(string, interface{}) contracts.QueryBuilder) *QueryBuilder_Where_Call {
	_c.Call.Return(run)
	return _c
}

// WhereExists provides a mock function with given fields: field
func (_m *QueryBuilder) WhereExists(field string) contracts.QueryBuilder {
	ret := _m.Called(field)

	if len(ret) == 0 {
		panic("no return value specified for WhereExists")
	}

	var r0 contracts.QueryBuilder
	if rf, ok := ret.Get(0).(func(string) contracts.QueryBuilder); ok {
		r0 = rf(field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.QueryBuilder)
		}
	}

	return r0
}

// QueryBuilder_WhereExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereExists'
type QueryBuilder_WhereExists_Call struct {
	*mock.Call
}

// WhereExists is a helper method to define mock.On call
//   - field string
func (_e *QueryBuilder_Expecter) WhereExists(field interface{}) *QueryBuilder_WhereExists_Call {
	return &QueryBuilder_WhereExists_Call{Call: _e.mock.On("WhereExists", field)}
}

func (_c *QueryBuilder_WhereExists_Call) Run(run func(field string)) *QueryBuilder_WhereExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *QueryBuilder_WhereExists_Call) Return(_a0 contracts.QueryBuilder) *QueryBuilder_WhereExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_WhereExists_Call) RunAndReturn(run func(string) contracts.QueryBuilder) *QueryBuilder_WhereExists_Call {
	_c.Call.Return(run)
	return _c
}

// WhereGt provides a mock function with given fields: field, value
func (_m *QueryBuilder) WhereGt(field string, value interface{}) contracts.QueryBuilder {
	ret := _m.Called(field, value)

	if len(ret) == 0 {
		panic("no return value specified for WhereGt")
	}

	var r0 contracts.QueryBuilder
	if rf, ok := ret.Get(0).(func(string, interface{}) contracts.QueryBuilder); ok {
		r0 = rf(field, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.QueryBuilder)
		}
	}

	return r0
}

// QueryBuilder_WhereGt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereGt'
type QueryBuilder_WhereGt_Call struct {
	*mock.Call
}

// WhereGt is a helper method to define mock.On call
//   - field string
//   - value interface{}
func (_e *QueryBuilder_Expecter) WhereGt(field interface{}, value interface{}) *QueryBuilder_WhereGt_Call {
	return &QueryBuilder_WhereGt_Call{Call: _e.mock.On("WhereGt", field, value)}
}

func (_c *QueryBuilder_WhereGt_Call) Run(run func(field string, value interface{})) *QueryBuilder_WhereGt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *QueryBuilder_WhereGt_Call) Return(_a0 contracts.QueryBuilder) *QueryBuilder_WhereGt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_WhereGt_Call) RunAndReturn(run func(string, interface{}) contracts.QueryBuilder) *QueryBuilder_WhereGt_Call {
	_c.Call.Return(run)
	return _c
}

// WhereGte provides a mock function with given fields: field, value
func (_m *QueryBuilder) WhereGte(field string, value interface{}) contracts.QueryBuilder {
	ret := _m.Called(field, value)

	if len(ret) == 0 {
		panic("no return value specified for WhereGte")
	}

	var r0 contracts.QueryBuilder
	if rf, ok := ret.Get(0).(func(string, interface{}) contracts.QueryBuilder); ok {
		r0 = rf(field, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.QueryBuilder)
		}
	}

	return r0
}

// QueryBuilder_WhereGte_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereGte'
type QueryBuilder_WhereGte_Call struct {
	*mock.Call
}

// WhereGte is a helper method to define mock.On call
//   - field string
//   - value interface{}
func (_e *QueryBuilder_Expecter) WhereGte(field interface{}, value interface{}) *QueryBuilder_WhereGte_Call {
	return &QueryBuilder_WhereGte_Call{Call: _e.mock.On("WhereGte", field, value)}
}

func (_c *QueryBuilder_WhereGte_Call) Run(run func(field string, value interface{})) *QueryBuilder_WhereGte_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *QueryBuilder_WhereGte_Call) Return(_a0 contracts.QueryBuilder) *QueryBuilder_WhereGte_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_WhereGte_Call) RunAndReturn(run func(string, interface{}) contracts.QueryBuilder) *QueryBuilder_WhereGte_Call {
	_c.Call.Return(run)
	return _c
}

// WhereIn provides a mock function with given fields: field, values
func (_m *QueryBuilder) WhereIn(field string, values []interface{}) contracts.QueryBuilder {
	ret := _m.Called(field, values)

	if len(ret) == 0 {
		panic("no return value specified for WhereIn")
	}

	var r0 contracts.QueryBuilder
	if rf, ok := ret.Get(0).(func(string, []interface{}) contracts.QueryBuilder); ok {
		r0 = rf(field, values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.QueryBuilder)
		}
	}

	return r0
}

// QueryBuilder_WhereIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereIn'
type QueryBuilder_WhereIn_Call struct {
	*mock.Call
}

// WhereIn is a helper method to define mock.On call
//   - field string
//   - values []interface{}
func (_e *QueryBuilder_Expecter) WhereIn(field interface{}, values interface{}) *QueryBuilder_WhereIn_Call {
	return &QueryBuilder_WhereIn_Call{Call: _e.mock.On("WhereIn", field, values)}
}

func (_c *QueryBuilder_WhereIn_Call) Run(run func(field string, values []interface{})) *QueryBuilder_WhereIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]interface{}))
	})
	return _c
}

func (_c *QueryBuilder_WhereIn_Call) Return(_a0 contracts.QueryBuilder) *QueryBuilder_WhereIn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_WhereIn_Call) RunAndReturn(run func(string, []interface{}) contracts.QueryBuilder) *QueryBuilder_WhereIn_Call {
	_c.Call.Return(run)
	return _c
}

// WhereLt provides a mock function with given fields: field, value
func (_m *QueryBuilder) WhereLt(field string, value interface{}) contracts.QueryBuilder {
	ret := _m.Called(field, value)

	if len(ret) == 0 {
		panic("no return value specified for WhereLt")
	}

	var r0 contracts.QueryBuilder
	if rf, ok := ret.Get(0).(func(string, interface{}) contracts.QueryBuilder); ok {
		r0 = rf(field, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.QueryBuilder)
		}
	}

	return r0
}

// QueryBuilder_WhereLt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereLt'
type QueryBuilder_WhereLt_Call struct {
	*mock.Call
}

// WhereLt is a helper method to define mock.On call
//   - field string
//   - value interface{}
func (_e *QueryBuilder_Expecter) WhereLt(field interface{}, value interface{}) *QueryBuilder_WhereLt_Call {
	return &QueryBuilder_WhereLt_Call{Call: _e.mock.On("WhereLt", field, value)}
}

func (_c *QueryBuilder_WhereLt_Call) Run(run func(field string, value interface{})) *QueryBuilder_WhereLt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *QueryBuilder_WhereLt_Call) Return(_a0 contracts.QueryBuilder) *QueryBuilder_WhereLt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_WhereLt_Call) RunAndReturn(run func(string, interface{}) contracts.QueryBuilder) *QueryBuilder_WhereLt_Call {
	_c.Call.Return(run)
	return _c
}

// WhereLte provides a mock function with given fields: field, value
func (_m *QueryBuilder) WhereLte(field string, value interface{}) contracts.QueryBuilder {
	ret := _m.Called(field, value)

	if len(ret) == 0 {
		panic("no return value specified for WhereLte")
	}

	var r0 contracts.QueryBuilder
	if rf, ok := ret.Get(0).(func(string, interface{}) contracts.QueryBuilder); ok {
		r0 = rf(field, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.QueryBuilder)
		}
	}

	return r0
}

// QueryBuilder_WhereLte_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereLte'
type QueryBuilder_WhereLte_Call struct {
	*mock.Call
}

// WhereLte is a helper method to define mock.On call
//   - field string
//   - value interface{}
func (_e *QueryBuilder_Expecter) WhereLte(field interface{}, value interface{}) *QueryBuilder_WhereLte_Call {
	return &QueryBuilder_WhereLte_Call{Call: _e.mock.On("WhereLte", field, value)}
}

func (_c *QueryBuilder_WhereLte_Call) Run(run func(field string, value interface{})) *QueryBuilder_WhereLte_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *QueryBuilder_WhereLte_Call) Return(_a0 contracts.QueryBuilder) *QueryBuilder_WhereLte_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_WhereLte_Call) RunAndReturn(run func(string, interface{}) contracts.QueryBuilder) *QueryBuilder_WhereLte_Call {
	_c.Call.Return(run)
	return _c
}

// WhereNe provides a mock function with given fields: field, value
func (_m *QueryBuilder) WhereNe(field string, value interface{}) contracts.QueryBuilder {
	ret := _m.Called(field, value)

	if len(ret) == 0 {
		panic("no return value specified for WhereNe")
	}

	var r0 contracts.QueryBuilder
	if rf, ok := ret.Get(0).(func(string, interface{}) contracts.QueryBuilder); ok {
		r0 = rf(field, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.QueryBuilder)
		}
	}

	return r0
}

// QueryBuilder_WhereNe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereNe'
type QueryBuilder_WhereNe_Call struct {
	*mock.Call
}

// WhereNe is a helper method to define mock.On call
//   - field string
//   - value interface{}
func (_e *QueryBuilder_Expecter) WhereNe(field interface{}, value interface{}) *QueryBuilder_WhereNe_Call {
	return &QueryBuilder_WhereNe_Call{Call: _e.mock.On("WhereNe", field, value)}
}

func (_c *QueryBuilder_WhereNe_Call) Run(run func(field string, value interface{})) *QueryBuilder_WhereNe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *QueryBuilder_WhereNe_Call) Return(_a0 contracts.QueryBuilder) *QueryBuilder_WhereNe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_WhereNe_Call) RunAndReturn(run func(string, interface{}) contracts.QueryBuilder) *QueryBuilder_WhereNe_Call {
	_c.Call.Return(run)
	return _c
}

// WhereNotExists provides a mock function with given fields: field
func (_m *QueryBuilder) WhereNotExists(field string) contracts.QueryBuilder {
	ret := _m.Called(field)

	if len(ret) == 0 {
		panic("no return value specified for WhereNotExists")
	}

	var r0 contracts.QueryBuilder
	if rf, ok := ret.Get(0).(func(string) contracts.QueryBuilder); ok {
		r0 = rf(field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.QueryBuilder)
		}
	}

	return r0
}

// QueryBuilder_WhereNotExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereNotExists'
type QueryBuilder_WhereNotExists_Call struct {
	*mock.Call
}

// WhereNotExists is a helper method to define mock.On call
//   - field string
func (_e *QueryBuilder_Expecter) WhereNotExists(field interface{}) *QueryBuilder_WhereNotExists_Call {
	return &QueryBuilder_WhereNotExists_Call{Call: _e.mock.On("WhereNotExists", field)}
}

func (_c *QueryBuilder_WhereNotExists_Call) Run(run func(field string)) *QueryBuilder_WhereNotExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *QueryBuilder_WhereNotExists_Call) Return(_a0 contracts.QueryBuilder) *QueryBuilder_WhereNotExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_WhereNotExists_Call) RunAndReturn(run func(string) contracts.QueryBuilder) *QueryBuilder_WhereNotExists_Call {
	_c.Call.Return(run)
	return _c
}

// WhereNotIn provides a mock function with given fields: field, values
func (_m *QueryBuilder) WhereNotIn(field string, values []interface{}) contracts.QueryBuilder {
	ret := _m.Called(field, values)

	if len(ret) == 0 {
		panic("no return value specified for WhereNotIn")
	}

	var r0 contracts.QueryBuilder
	if rf, ok := ret.Get(0).(func(string, []interface{}) contracts.QueryBuilder); ok {
		r0 = rf(field, values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.QueryBuilder)
		}
	}

	return r0
}

// QueryBuilder_WhereNotIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereNotIn'
type QueryBuilder_WhereNotIn_Call struct {
	*mock.Call
}

// WhereNotIn is a helper method to define mock.On call
//   - field string
//   - values []interface{}
func (_e *QueryBuilder_Expecter) WhereNotIn(field interface{}, values interface{}) *QueryBuilder_WhereNotIn_Call {
	return &QueryBuilder_WhereNotIn_Call{Call: _e.mock.On("WhereNotIn", field, values)}
}

func (_c *QueryBuilder_WhereNotIn_Call) Run(run func(field string, values []interface{})) *QueryBuilder_WhereNotIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]interface{}))
	})
	return _c
}

func (_c *QueryBuilder_WhereNotIn_Call) Return(_a0 contracts.QueryBuilder) *QueryBuilder_WhereNotIn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_WhereNotIn_Call) RunAndReturn(run func(string, []interface{}) contracts.QueryBuilder) *QueryBuilder_WhereNotIn_Call {
	_c.Call.Return(run)
	return _c
}

// WhereRegex provides a mock function with given fields: field, pattern, options
func (_m *QueryBuilder) WhereRegex(field string, pattern string, options ...string) contracts.QueryBuilder {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, field, pattern)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WhereRegex")
	}

	var r0 contracts.QueryBuilder
	if rf, ok := ret.Get(0).(func(string, string, ...string) contracts.QueryBuilder); ok {
		r0 = rf(field, pattern, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.QueryBuilder)
		}
	}

	return r0
}

// QueryBuilder_WhereRegex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereRegex'
type QueryBuilder_WhereRegex_Call struct {
	*mock.Call
}

// WhereRegex is a helper method to define mock.On call
//   - field string
//   - pattern string
//   - options ...string
func (_e *QueryBuilder_Expecter) WhereRegex(field interface{}, pattern interface{}, options ...interface{}) *QueryBuilder_WhereRegex_Call {
	return &QueryBuilder_WhereRegex_Call{Call: _e.mock.On("WhereRegex",
		append([]interface{}{field, pattern}, options...)...)}
}

func (_c *QueryBuilder_WhereRegex_Call) Run(run func(field string, pattern string, options ...string)) *QueryBuilder_WhereRegex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *QueryBuilder_WhereRegex_Call) Return(_a0 contracts.QueryBuilder) *QueryBuilder_WhereRegex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryBuilder_WhereRegex_Call) RunAndReturn(run func(string, string, ...string) contracts.QueryBuilder) *QueryBuilder_WhereRegex_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueryBuilder creates a new instance of QueryBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryBuilder {
	mock := &QueryBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
