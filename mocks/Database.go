// Code generated by mockery. DO NOT EDIT.

package contracts

import (
	contracts "github.com/portofolio-mager/goravel-mongodb/contracts"
	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// Collection provides a mock function with given fields: name
func (_m *Database) Collection(name string) contracts.Collection {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 contracts.Collection
	if rf, ok := ret.Get(0).(func(string) contracts.Collection); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.Collection)
		}
	}

	return r0
}

// Database_Collection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collection'
type Database_Collection_Call struct {
	*mock.Call
}

// Collection is a helper method to define mock.On call
//   - name string
func (_e *Database_Expecter) Collection(name interface{}) *Database_Collection_Call {
	return &Database_Collection_Call{Call: _e.mock.On("Collection", name)}
}

func (_c *Database_Collection_Call) Run(run func(name string)) *Database_Collection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_Collection_Call) Return(_a0 contracts.Collection) *Database_Collection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Collection_Call) RunAndReturn(run func(string) contracts.Collection) *Database_Collection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCollection provides a mock function with given fields: name, opts
func (_m *Database) CreateCollection(name string, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = rf(name, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_CreateCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCollection'
type Database_CreateCollection_Call struct {
	*mock.Call
}

// CreateCollection is a helper method to define mock.On call
//   - name string
//   - opts ...interface{}
func (_e *Database_Expecter) CreateCollection(name interface{}, opts ...interface{}) *Database_CreateCollection_Call {
	return &Database_CreateCollection_Call{Call: _e.mock.On("CreateCollection",
		append([]interface{}{name}, opts...)...)}
}

func (_c *Database_CreateCollection_Call) Run(run func(name string, opts ...interface{})) *Database_CreateCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Database_CreateCollection_Call) Return(_a0 error) *Database_CreateCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CreateCollection_Call) RunAndReturn(run func(string, ...interface{}) error) *Database_CreateCollection_Call {
	_c.Call.Return(run)
	return _c
}

// Drop provides a mock function with no fields
func (_m *Database) Drop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Drop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type Database_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
func (_e *Database_Expecter) Drop() *Database_Drop_Call {
	return &Database_Drop_Call{Call: _e.mock.On("Drop")}
}

func (_c *Database_Drop_Call) Run(run func()) *Database_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Drop_Call) Return(_a0 error) *Database_Drop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Drop_Call) RunAndReturn(run func() error) *Database_Drop_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollections provides a mock function with no fields
func (_m *Database) ListCollections() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListCollections")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_ListCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollections'
type Database_ListCollections_Call struct {
	*mock.Call
}

// ListCollections is a helper method to define mock.On call
func (_e *Database_Expecter) ListCollections() *Database_ListCollections_Call {
	return &Database_ListCollections_Call{Call: _e.mock.On("ListCollections")}
}

func (_c *Database_ListCollections_Call) Run(run func()) *Database_ListCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_ListCollections_Call) Return(_a0 []string, _a1 error) *Database_ListCollections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_ListCollections_Call) RunAndReturn(run func() ([]string, error)) *Database_ListCollections_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *Database) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Database_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Database_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Database_Expecter) Name() *Database_Name_Call {
	return &Database_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Database_Name_Call) Run(run func()) *Database_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Name_Call) Return(_a0 string) *Database_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Name_Call) RunAndReturn(run func() string) *Database_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Native provides a mock function with no fields
func (_m *Database) Native() *mongo.Database {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Native")
	}

	var r0 *mongo.Database
	if rf, ok := ret.Get(0).(func() *mongo.Database); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Database)
		}
	}

	return r0
}

// Database_Native_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Native'
type Database_Native_Call struct {
	*mock.Call
}

// Native is a helper method to define mock.On call
func (_e *Database_Expecter) Native() *Database_Native_Call {
	return &Database_Native_Call{Call: _e.mock.On("Native")}
}

func (_c *Database_Native_Call) Run(run func()) *Database_Native_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Native_Call) Return(_a0 *mongo.Database) *Database_Native_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Native_Call) RunAndReturn(run func() *mongo.Database) *Database_Native_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
