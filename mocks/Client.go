// Code generated by mockery. DO NOT EDIT.

package contracts

import (
	contracts "github.com/portofolio-mager/goravel-mongodb/contracts"
	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *Client) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Client_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Client_Expecter) Close() *Client_Close_Call {
	return &Client_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Client_Close_Call) Run(run func()) *Client_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Close_Call) Return(_a0 error) *Client_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Close_Call) RunAndReturn(run func() error) *Client_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Collection provides a mock function with given fields: collection, database
func (_m *Client) Collection(collection string, database ...string) contracts.Collection {
	_va := make([]interface{}, len(database))
	for _i := range database {
		_va[_i] = database[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, collection)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 contracts.Collection
	if rf, ok := ret.Get(0).(func(string, ...string) contracts.Collection); ok {
		r0 = rf(collection, database...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.Collection)
		}
	}

	return r0
}

// Client_Collection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collection'
type Client_Collection_Call struct {
	*mock.Call
}

// Collection is a helper method to define mock.On call
//   - collection string
//   - database ...string
func (_e *Client_Expecter) Collection(collection interface{}, database ...interface{}) *Client_Collection_Call {
	return &Client_Collection_Call{Call: _e.mock.On("Collection",
		append([]interface{}{collection}, database...)...)}
}

func (_c *Client_Collection_Call) Run(run func(collection string, database ...string)) *Client_Collection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Client_Collection_Call) Return(_a0 contracts.Collection) *Client_Collection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Collection_Call) RunAndReturn(run func(string, ...string) contracts.Collection) *Client_Collection_Call {
	_c.Call.Return(run)
	return _c
}

// Database provides a mock function with given fields: name
func (_m *Client) Database(name ...string) contracts.Database {
	_va := make([]interface{}, len(name))
	for _i := range name {
		_va[_i] = name[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Database")
	}

	var r0 contracts.Database
	if rf, ok := ret.Get(0).(func(...string) contracts.Database); ok {
		r0 = rf(name...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.Database)
		}
	}

	return r0
}

// Client_Database_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Database'
type Client_Database_Call struct {
	*mock.Call
}

// Database is a helper method to define mock.On call
//   - name ...string
func (_e *Client_Expecter) Database(name ...interface{}) *Client_Database_Call {
	return &Client_Database_Call{Call: _e.mock.On("Database",
		append([]interface{}{}, name...)...)}
}

func (_c *Client_Database_Call) Run(run func(name ...string)) *Client_Database_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Client_Database_Call) Return(_a0 contracts.Database) *Client_Database_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Database_Call) RunAndReturn(run func(...string) contracts.Database) *Client_Database_Call {
	_c.Call.Return(run)
	return _c
}

// Native provides a mock function with no fields
func (_m *Client) Native() *mongo.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Native")
	}

	var r0 *mongo.Client
	if rf, ok := ret.Get(0).(func() *mongo.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Client)
		}
	}

	return r0
}

// Client_Native_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Native'
type Client_Native_Call struct {
	*mock.Call
}

// Native is a helper method to define mock.On call
func (_e *Client_Expecter) Native() *Client_Native_Call {
	return &Client_Native_Call{Call: _e.mock.On("Native")}
}

func (_c *Client_Native_Call) Run(run func()) *Client_Native_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Native_Call) Return(_a0 *mongo.Client) *Client_Native_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Native_Call) RunAndReturn(run func() *mongo.Client) *Client_Native_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with no fields
func (_m *Client) Ping() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type Client_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *Client_Expecter) Ping() *Client_Ping_Call {
	return &Client_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *Client_Ping_Call) Run(run func()) *Client_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Ping_Call) Return(_a0 error) *Client_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Ping_Call) RunAndReturn(run func() error) *Client_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
